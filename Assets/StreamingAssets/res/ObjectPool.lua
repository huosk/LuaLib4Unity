---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by SK.
--- DateTime: 2018/10/26 16:21
--- 对象池管理器


local TableUtil = require("Util.TableUtil")

local PoolManager = {}

---@class UnityEngine.Object
local uobj = CS.UnityEngine.Object

---创建 Unity GameObject 回收器
local function CreateGameObjectRecycler()

    ---class GameObjectRecycler : Recycler
    local t = {}

    ---物体是否可用
    ---@param obj UnityEngine.Object
    ---@return boolean
    function t.IsAvailable(obj)
        if obj ~= nil then
            return true
        else
            return false
        end
    end

    ---复制实例
    ---@param proto UnityEngine.Object
    ---@return UnityEngine.Object
    function t.Clone(proto)
        return uobj.Instantiate(proto)
    end

    ---删除实例
    ---@param obj UnityEngine.Object
    function t.Delete(obj)
        uobj.Destroy(obj)
    end

    ---回收实例
    ---@param obj UnityEngine.Object
    ---@return boolean 是否成功
    function t.Recycle(obj)
        if not obj then
            return false
        end

        obj:SetActive(false)
        return true
    end

    ---重新利用实例
    ---@param obj UnityEngine.Object
    function t.Select(obj)
        obj:SetActive(true)
    end

    return t
end

---创建Unity 游戏对象的回收器
---@type Recycler
PoolManager.gameobjectRecycler = CreateGameObjectRecycler()

---创建对象池
---@param proto UnityEngine.Object 对象原型
---@param recycler Recycler 对象回收器
function PoolManager.CreatePool(proto,recycler)

    assert(proto ~= nil,"nil:proto")
    assert(recycler ~= nil,"nil:recycler")

    ---对象池
    ---@class Pool
    ---@field onGet fun(g:UnityEngine.Object) 生成（再利用）实例时的回调
    ---@field onWillRecycle fun(g:UnityEngine.Object) 将要回收时的回调
    ---@field recycles Recycle[] 存在于池里的实例
    ---@field maxCount 池最大元素个数
    local pool = {
        onGet = nil,
        onWillRecycle = nil,
        recycles = {},
        maxCount = 100
    }

    ---创建新实例对象
    local function Create()
        local recy = {}
        recy.obj = recycler.Clone(proto)
        recy.isActive = true

        if #pool.recycles < pool.maxCount then
            table.insert(pool.recycles,recy)
        end

        return recy
    end

    local function FindRecycle(obj)
        assert(obj ~= nil,"nil:obj")

        for _,v in pairs(pool.recycles) do
            if v and v.obj == obj then
                return v
            end
        end

        return nil
    end

    local function FindReusable()
        if not pool.recycles then
            return nil
        end

        for _,v in pairs(pool.recycles) do
            if not v and not v.isActive then
                return v
            end
        end
        return nil
    end

    local function DoRecycle(recy)
        assert(recy ~= nil,"nil:recy")

        if recycler.Recycle(recy.obj) then
            recy.isActive = false
        end
    end

    ---预加载
    ---@param count number 预加载元素的数量
    function pool:PreLoad(count)
        if count <= 0 then
            return
        end

        local c = count > self.maxCount and self.maxCount or count
        if #self.recycles >= c then
            return
        else
            c = c - #self.recycles
        end

        for i=1,c do
            local recy = Create()

            if self.onWillRecycle then
                self.onWillRecycle(recy.obj)
            end

            DoRecycle(recy)
        end
    end

    ---从对象池获取实例
    ---@generic T : UnityEngine.Object
    ---@return T
    function pool:Get()
        local recy = FindReusable()
        if recy then
            recy.isActive = true
        else
            recy = Create()
        end

        recycler.Select(recy.obj)

        if self.onGet then
            self.onGet(recy.obj)
        end

        return recy.obj
    end

    ---回收实例
    ---@param obj UnityEngine.Object 要回收的实例对象
    function pool:Recycle(obj)
        if obj == nil then
            return
        end

        if self.onWillRecycle then
            self.onWillRecycle(obj)
        end

        local recy = FindRecycle(obj)
        if recy then
            DoRecycle(recy)
        else
            recycler.Delete(obj)
        end
    end

    ---删除所有对象池的缓存
    ---@param delActive boolean 是否删除当前处于激活的实例
    function pool:DeleteAllCache(delActive)
        delActive = delActive == nil and true or delActive

        if not self.recycles then
            return
        end

        for _,v in pairs(self.recycles) do
            if v and (not v.isActive or delActive) then
                recycler.Delete(v.obj)
                v.obj = nil
            end
        end

        TableUtil.RemoveAll(self.recycles,function (v) return v == nil or v.obj == nil end)
    end

    return pool
end

return PoolManager