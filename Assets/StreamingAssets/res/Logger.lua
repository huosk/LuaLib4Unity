---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hsk.
--- DateTime: 2018/10/30 9:57 PM
--- 日志管理模块

local string, socket = string, require("socket")

---@class LogLevel 日志输出等级
local LogLevel = { Debug = 1,
                   Info = 2,
                   Warn = 3,
                   Error = 4,
                   Fatal = 5 }

---@class Logger
---@field logLevel LogLevel 日志输出等级
---@field logFilter fun(ll:LogLevel,inf:string)[] 日志过滤器
---@field enableDebug boolean 是否开启调试，默认为开启状态
local logger = { logLevel = LogLevel.Debug,
                 logFilter = {},
                 enableDebug = true,
                 appendDate = true,
                 logFileDir = nil,
                 logFileHandle = nil }

local maxSizePerLogFile = 5242880 --5MB大小

local function Log(logger, loglevel, content)

    if logger.logLevel > loglevel then
        return
    end

    local info = content
    if logger.appendDate then
        local t = socket.gettime()
        local time, ms = math.modf(t, 1)
        info = string.format(">%s.%.0f %s", os.date("%Y-%m-%d,%H:%M:%S", time), ms * 1000, content)
    end

    if logger.logFilter then
        for _, v in pairs(logger.logFilter) do
            if v then
                v(logger, loglevel, info)
            end
        end
    end
end

function logger:Debug(fmt, ...)
    Log(self, LogLevel.Debug, string.format(fmt, ...))
end

function logger:Info(fmt, ...)
    Log(self, LogLevel.Info, string.format(fmt, ...))
end

function logger:Warn(fmt, ...)
    Log(self, LogLevel.Warn, string.format(fmt, ...))
end

function logger:Error(fmt, ...)
    Log(self, LogLevel.Error, string.format(fmt, ...))
end

function logger:Fatal(fmt, ...)
    Log(self, LogLevel.Fatal, string.format(fmt, ...))
end

local function Debug(logger, logLevel, content)
    if logLevel == LogLevel.Error or logLevel == LogLevel.Fatal then
        CS.UnityEngine.Debug.LogError(content)
    elseif logLevel == LogLevel.Warn then
        CS.UnityEngine.Debug.LogWarning(content)
    else
        CS.UnityEngine.Debug.Log(content)
    end
end

---获取日志文件路径
local function GetFileName(fileDir, logindex)
    local file = string.format("%s/%s.txt", fileDir, logindex)
    local fileHandle = io.open(file, "r")

    --计算日志文件大小
    local fileSize = nil
    if fileHandle then
        fileSize = fileHandle:seek("end")
        fileHandle:close()
    end

    if fileSize == nil or fileSize < maxSizePerLogFile then
        return file
    else
        return GetFileName(fileDir, logindex + 1)
    end
end

local function LogLevelToString(loglevel)
    if loglevel == LogLevel.Debug then
        return "[D]"
    elseif loglevel == LogLevel.Info then
        return "[I]"
    elseif loglevel == LogLevel.Warn then
        return "[W]"
    elseif loglevel == LogLevel.Error then
        return "[E]"
    elseif loglevel == LogLevel.Fatal then
        return "[F]"
    end
end

local function AppendFile(logger, loglevel, content)
    if logger.logFileHandle == nil then
        local fileName = GetFileName(logger.logFileDir, 1)
        logger.logFileHandle = io.open(fileName, "a+")
    end

    if logger.logFileHandle then
        local inf = string.format("%s %s\n",LogLevelToString(loglevel),content)
        if logger.logFileHandle:write(inf) then
            logger.logFileHandle:flush()
        end
    end
end

---开启调试
function logger:EnableDebug()
    if not self.enableDebug then
        return
    end

    self.enableDebug = true
    self.logFilter["__debugger__"] = Debug
end

---禁用调试
function logger:DisableDebug()
    if self.enableDebug then
        return
    end

    self.enableDebug = false
    self.logFilter["__debugger__"] = nil
end

---将日志信息记录到文件
---@param fileDir string 日志存储目录，需要注意这里一定是一个可写入的目录
function logger:EnableFileAppender(fileDir)
    assert(fileDir ~= nil, "The log file directory cannot be nil")

    local fileAppender = self.logFilter["__fileappender__"]
    if not fileAppender then
        self.logFileDir = fileDir
        self.logFilter["__fileappender__"] = AppendFile
    end
end

---禁用日志信息记录到文件
function logger:DisableFileAppender()
    self.logFilter["__fileappender__"] = nil
    if logFileHandle then
        logFileHandle:flush()
        logFileHandle:close()
    end
end

logger:EnableDebug()
logger:DisableFileAppender()

return logger