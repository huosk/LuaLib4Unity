---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by SK.
--- DateTime: 2018/11/30 11:08
---

---加载器工厂，负责根据指定 url 和 资源类型，创建合适的加载器
---@field CreateLoader fun(url,type):Loader 创建接口
local LoaderFactory = {}

function LoaderFactory:CreateLoader(uri, type)
    ---资源加载器
    ---@class Loader
    ---@field Dispose fun(self:Loader):void
    ---@field GetLoaded(self:Loader):any
    ---@field GetError fun():string
    ---@field GetProgress fun(self:Loader):number
    ---@field IsDone fun():boolean
    local loader = {}

    ---TODO 这里暂时都用 WWW 进行加载
    ---后续需要根据地址和资源类型进行优化，这里不采用 WWW 的原因主要是，每个 WWW 对象都会创建一个
    ---新的线程，所以在加载大量资源时，就会创建等数量的线程， 从而造成主线程卡顿
    ---1. 本地资源包用 AssetBundle.LoadFromFile /AssetBundle.LoadFromFileAsync 加载
    ---2. 网络资源包用 UnityWebRequestAssetBundle.GetAssetBundle(...) 来加载
    local www = CS.UnityEngine.WWW(uri)
    local asset = nil

    function loader:IsDone()
        return www.isDone
    end

    function loader:GetProgress()
        return www.progress
    end

    function loader:GetLoaded()
        if type == typeof(CS.UnityEngine.AssetBundle) then
            asset = www.assetBundle
        elseif type == typeof(CS.UnityEngine.Texture) then
            asset = www.texture
        elseif type == typeof(CS.UnityEngine.AudioClip) then
            asset = www.GetAudioClip()
        else
            asset = nil
        end
        return asset
    end

    function loader:GetError()
        return www.error
    end

    return loader
end

return LoaderFactory