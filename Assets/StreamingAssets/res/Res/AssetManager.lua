---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by SK.
--- DateTime: 2018/11/26 11:15
---

require("Res.CacheManager")
require("Res.AssetType")
require("Res.ResInfoManager")
local task = require("Res.LoadTask")
local tbUtil = require("Util.TableUtil")

local function AssetManager()
    ---@class AssetManager : CachePool
    ---@field urlConverter UrlConverter
    ---@field infoMgr ResInfoManager
    ---@field onInit fun():void
    local manager = CreateCacheManager()

    ---公有属性
    manager.infoMgr = nil

    ---@type table<int,AssetLoadTask>
    local taskQueue = {}

    ---创建资源加载任务，并且处理相关依赖的加载
    ---@param url string
    ---@param creator fun(url:string):CachableAssetLoadTask
    ---@return boolean
    function manager:CreateCacheLoadTask(url, creator)
        local loading = self:FindTaskByUri(url)
        if loading then
            loading.reference = loading.reference + 1
            return
        end

        local loaded = self:GetCache(url)
        if loaded then
            ---如果已经加载过，递增引用
            loaded.refCount = loaded.refCount + 1
            return
        end

        ---从未加载过该资源，需要创建加载任务进行加载
        local created = creator(url)
        self:AddTaskToProcess(created)

        ---处理依赖资源
        if infoMgr then
            local deps = self.infoMgr:GetAllRemapDependencies(url)
            for _, v in pairs(deps) do
                self:CreateCacheLoadTask(v, creator)
            end
        end
    end

    ---卸载资源包
    ---@param bundleName
    function manager:UnloadAssetBundle(url)
        ---如果正在加载，递减任务引用
        local loading,index = self:FindTaskByUri(url)
        if loading then
            loading.reference = loading.reference - 1
            ---如果任务引用递减为0，则任务需要停止
            if loading.reference <= 0 then
                self:DelTaskFromProcess(index)
            end
        end

        local loaded = self:GetCache(url)
        if loaded then
            loaded.refCount = loaded - 1
            if loaded.refCount <= 0 then
                self:ClearCache(url)
            end
        end

        self:UnloadDependences(url)
    end

    ---卸载依赖资源包
    ---@param bundleName
    function manager:UnloadDependences(url)
        local deps = self.infoMgr:GetAllRemapDependencies(url)
        if not deps then
            return
        end

        for _, v in pairs(deps) do
            self:UnloadAssetBundle(v)
        end
    end

    ---加载完成之后的回调
    ---@param task CachableAssetLoadTask
    function manager:OnTaskComplete(task)
    end

    ---更新任务加载进度，必须在主线程进行调用
    function manager.Update()
        local idx = 1
        while (idx <= #taskQueue) do
            taskQueue[idx]:UpdateTask()
            if taskQueue[idx]:IsDone() then
                manager:OnTaskComplete(taskQueue[idx])
                manager:DelTaskFromProcess(idx)
            else
                idx = idx + 1
            end
        end
    end

    ---根据资源地址，获取相应的加载任务
    ---@return CachableAssetLoadTask,number
    function manager:FindTaskByUri(url)
        if not taskQueue then
            return nil,0
        end

        local finded,index = nil
        for i=1,#taskQueue do
            if taskQueue[i] and taskQueue[i]:GetUri() == url then
                finded = v
                index = i
                break
            end
        end
        return finded,index
    end

    ---检测是否有任务正在加载资源
    ---@param 资源地址
    ---@return boolean
    function manager:IsTaskProcessing(url)
        return FindTaskByUri(url) ~= nil
    end

    ---将任务从处理队列中移除
    ---@field number 任务
    function manager:DelTaskFromProcess(index)
        local task = taskQueue[index]
        task:Stop()
        table.remove(taskQueue, index)
    end

    ---将任务添加到队列中
    ---@field task AssetLoadTask
    function manager:AddTaskToProcess(task)
        assert(task ~= nil, "Nil argument::task")
        local contains = false
        for k, v in pairs(taskQueue) do
            if v == task then
                contains = true
                break
            end
        end

        if not contains then
            task:Start()
            table.insert(taskQueue, task)
        end
    end

    ---从Resources 目录加载资源
    ---@param path string
    ---@param type AssetType
    ---@param onFinish fun(t:UnityEngine.Object)
    ---@return LoadLocalResTask
    function manager:LoadLocalAsync(path, type, onFinish)
        local task = task.LoadLocalResTask(path,self, AssetTypeToCSType(type))
        if onFinish then
            task.onFinish:AddListener(function(t)
                onFinish(task:GetAsset())
            end)
        end

        manager:AddTaskToProcess(task)
        return task
    end

    ---从 AssetBundle 中加载资源
    ---@param url string
    ---@param assetName string
    ---@param type AssetType
    ---@param onFinish fun(t:UnityEngine.Object):any
    ---@param onError fun(error:string):any
    ---@return LoadBundleAssetTask
    function manager:LoadBundleAssetAsync(url, assetName, type, onFinish, onError)
        local bundleTask = task.LoadBundleTask(url,self, typeof(CS.UnityEngine.AssetBundle))
        self:AddTaskToProcess(bundleTask)

        local task = task.LoadBundleAssetTask(url,self, AssetTypeToCSType(type), assetName)
        if onFinish then
            task.onFinish:AddListener(function(t)
                onFinish(task:GetAsset())
            end)
        end

        if onError then
            task.onError:AddListener(function(t)
                onError(t.error)
            end)
        end

        self:AddTaskToProcess(task)
        return task
    end

    return manager
end

local single = AssetManager()
return single