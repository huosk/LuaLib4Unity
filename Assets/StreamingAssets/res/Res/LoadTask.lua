---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by SK.
--- DateTime: 2018/11/26 15:14
---
local Event = require("LuaEventDispatcher")
local Logger = require("Logger")

require("Res.ObjectCache")
local Downloader = require("Res.Downloader")

---@type fun(url:string,type:CS.System.Type):CS.UnityEngine.Object
local ResourcesLoadAsync = CS.UnityEngine.Resources.LoadAsync

---@class TaskState
---@field Created 在任务创建之后的状态
---@field Running 正在运行
---@field Success 执行成功
---@field Failed 执行失败
TaskState = {Created = 0, Running = 1, Success = 2, Failed = 3}

---资源加载任务基类
---@return AssetLoadTask
local function AssetLoadTask(uri)

    ---@class AssetLoadTask
    ---@field error string      加载错误
    ---@field state TaskState   任务状态
    ---@field onFinish Event    任务结束回调
    ---@field onError Event     任务出错回调
    ---@field Start fun():boolean  开始执行任务
    ---@field Stop fun():boolean 停止(取消)执行任务，任务相关资源将会释放.。
    ---@field IsDone fun():boolean 检测任务是否完成
    ---@field UpdateTask fun():void 更新任务
    ---@field Reset fun():void 重置任务
    ---@field GetUri fun():string 获取资源标识
    ---@field OnFinishInternal fun():void 任务结束回调
    ---@field OnErrorInternal fun():void 任务出错回调
    local task = {}

    task.error = nil
    task.state = TaskState.Created
    task.onFinish = Event.CreateEventTable()
    task.onError = Event.CreateEventTable()

    ---资源的 Uri
    local assetUri = uri

    ---开始执行任务，任务状态由 Created -> Running
    function task:Start()
        if self.state == TaskState.Created then
            self.state = TaskState.Running
            return true
        end
        return false
    end

    function task:Stop()
        task.onFinish = nil
        task.onError = nil
    end

    ---任务是否完成
    ---@return boolean
    function task:IsDone()
        return false
    end

    ---更新任务处理
    function task:UpdateTask()
    end

    ---重置任务，只有任务结束时才能重置
    function task:Reset()
        if self.state == TaskState.Success or self.state == TaskState.Failed then
            self.state = TaskState.Created
        end
    end

    ---获取资源 Uri
    function task:GetUri()
        return assetUri
    end

    ---任务结束时的回调
    function task:OnFinishInternal()
        self.onFinish:Dispatch(self)
        Logger:Info("Load task success! url: %s",assetUri)
    end

    ---任务出错时的回调
    function task:OnErrorInternal()
        self.onError:Dispatch(self)
        Logger:Error("Load task failed! url: %s, error: %s",assetUri,self.error)
    end

    return task
end


---可缓存资源任务加载基类
---@param url string
---@param pool CachePool
---@return CachableAssetLoadTask
local function CachableAssetLoadTask(url, pool)

    ---@class CachableAssetLoadTask : AssetLoadTask
    ---@field cache ObjectCache
    ---@field reference number  任务引用个数
    ---@field GetAsset fun():any 获取缓存的对象
    local CALoadTask = AssetLoadTask(url)

    ---基类方法
    local baseStart = CALoadTask.Start


    CALoadTask.cache = nil
    CALoadTask.reference = 1

    function CALoadTask:Start()
        if baseStart(self) then
            print("begin bundle load task")
            return true
        end
        return false
    end


    ---加载资源，并创建缓存
    ---@return boolean,BundleCache,string
    ---第一个返回值：是否加载完成
    ---第二个返回值：如果加载成功，返回缓存对象；如果加载失败，返回缓存键值
    ---第三个返回值：如果加载失败，返回加载错误
    function CALoadTask:UpdateLoad()
        return true,nil,nil,nil
    end

    ---加载任务是否完成，无论成功、失败，都算任务结束
    ---@return boolean
    function CALoadTask:IsDone()
        return self.state == TaskState.Success or self.state == TaskState.Failed
    end

    ---生成缓存键值，默认采用资源的 URI 为键值
    ---@return string
    function CALoadTask:GenerateCacheKey()
        return self:GetUri()
    end

    function CALoadTask:UpdateTask()
        if self.state ~= TaskState.Running then
            return
        end

        local complete, cache,error = self:UpdateLoad()

        ---任务结束之后创建缓存
        if complete then
            if error and error~=""then
                pool:SaveError(self:GenerateCacheKey(),error)
                self.error = error
                self.cache = nil
                self.state = TaskState.Failed
                self:OnErrorInternal()
            else
                ---更新引用，将加载过程中的引用关系设置到缓存中
                if cache.refCount then
                    cache.refCount = self.reference
                end

                pool:SaveCache(cache)
                self.error = nil
                self.cache = cache
                self.state = TaskState.Success
                self:OnFinishInternal()
            end
        end
    end

    function CALoadTask:GetAsset()
        if self.cache then
            return self.cache:GetCache()
        else
            return nil
        end
    end

    return CALoadTask
end


---Resources 文件夹资源异步加载任务
---@param url string
---@param type CS.System.Type
---@param pool CachePool
---@return LoadLocalResTask
local function LoadLocalResTask(url,pool,type)

    ---@class LoadLocalResTask : AssetLoadTask
    local ltask = CachableAssetLoadTask(url,pool)

    ---@type CS.System.Type
    ltask.type = type

    ---资源加载请求
    ---@class CS.UnityEnginge.ResourceRequest
    ---@field isDone boolean 请求是否完成
    ---@field asset CS.UnityEngine.Object 请求返回的资源
    local request = nil

    function ltask:UpdateLoad()
        if not request then
            request = ResourcesLoadAsync(self:GetUri(),self.type)
        end

        if request.isDone then
            if request.asset then
                local newCache = CreateLocalObjCache(self:GenerateCacheKey())
                newCache:Cache(request.asset)
                return true,newCache,nil
            else
                local err = "Can not find the asset!"
                return true,nil,err
            end
        else
            return false,nil,nil
        end
    end

    return ltask
end


---加载任务：加载原始数据，类型包括图片、文字、字节流、AssetBundle...
---@param url string
---@param type CS.System.Type
---@param pool CachePool
---@return LoadBundleTask
local function LoadBundleTask(url, pool, type)
    ---@class LoadBundleTask:CachableAssetLoadTask
    local BundleTask = CachableAssetLoadTask(url,pool)

    ---@type Loader
    local loader = nil

    function BundleTask:UpdateLoad()
        if not loader then
            loader = Downloader:CreateLoader(self:GetUri(),type)
        end

        if loader:IsDone() then
            local asset = loader:GetLoaded()
            if asset then
                local newCache = CreateBundleCache(self:GenerateCacheKey())
                newCache:Cache(asset)
                return true,newCache,nil
            else
                return true,nil, loader:GetError()
            end

            loader:Dispose()
            loader = nil
        else
            return false,nil,nil
        end
    end

    return BundleTask
end

---加载任务：从资源包中加载物体
---@param url string
---@param assetName string
---@param type CS.System.Type
---@param pool AssetManager
---@return LoadBundleAssetTask
local function LoadBundleAssetTask(url,pool,type,assetName)
    ---@class LoadBundleAssetTask :AssetLoadTask
    ---@field url string
    ---@field updateBundleTask
    local atask = AssetLoadTask(url)

    local assetName = assetName
    local type = type
    local request = nil
    local asset = nil


    ---@type BundleCache
    local bundle = nil

    function atask:GetAsset()
        return asset
    end

    function atask:IsDone()
        return self.state == TaskState.Success or self.state == TaskState.Failed
    end

    function atask:UpdateTask()
        if self.state ~= TaskState.Running then
            return
        end

        if not bundle then
            bundle = pool:GetCache(url)
            if not bundle then
                return
            end
        end

        if not bundle:IsCached() then
            return
        end

        if not request then
            request = bundle:GetCache():LoadAssetAsync(assetName, type)
        end

        if request.isDone then
            asset = request.asset
            if asset then
                bundle:CacheObject(assetName,self:GetAsset())
                self.state = TaskState.Success
                self:OnFinishInternal()
            else
                self.state = TaskState.Failed
                self.error = "Failed load asset from bundle! asset name:"..assetName
                self:OnErrorInternal()
            end
        end
    end

    return atask
end

return { AssetLoadTask = AssetLoadTask,
         CachableAssetLoadTask = CachableAssetLoadTask,
         LoadLocalResTask = LoadLocalResTask,
         LoadBundleTask = LoadBundleTask,
         LoadBundleAssetTask=LoadBundleAssetTask}