---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by SK.
--- DateTime: 2018/11/26 12:02
---


---在资源加载完成之后，需要创建缓存，来避免重复的加载
---@param key string 存储/查询缓存的键值，通常为资源 Uri
---@return ObjectCache
function CreateObjectCache(key)

    ---@class ObjectCache 资源缓存类
    ---@field refCount number   引用个数
    ---@field Cache fun(s:ObjectCache,obj:any):void
    local cache = {}

    ---私有成员
    local cacheKey = key
    local loadedObj = nil

    ---引用计数
    cache.refCount = 1

    ---设置缓存
    ---@param obj UnityEngine.Object
    function cache:Cache(obj)
        loadedObj = obj
    end

    ---卸载缓存
    function cache:Unload()
        loadedObj = nil
    end

    ---是否已经存储对象
    ---@return boolean
    function cache:IsCached()
        return loadedObj ~= nil
    end

    ---获取缓存对象
    ---@return any
    function cache:GetCache()
        return loadedObj
    end

    ---获取缓存的 Url 地址
    ---@return string
    function cache:GetKey()
        return cacheKey
    end

    return cache
end

function CreateBundleCache(key)
    ---@class BundleCache : ObjectCache
    ---@field refCount number
    local BundleCache = CreateObjectCache(key)

    ---基类方法
    local baseCacheFuc = BundleCache.Cache
    local baseUnloadFunc = BundleCache.Unload

    function BundleCache:Cache(obj)
        assert(obj ~= nil,"Nil argument::obj")
        assert(obj.GetType and obj:GetType() == typeof(CS.UnityEngine.AssetBundle),"Invalid argument type,expect:UnityEngine.AssetBundle")
        baseCacheFuc(self,obj)
    end

    function BundleCache:Unload()
        local bundle = self:GetCache()
        if bundle then
            bundle:Unload(true)
        end
        baseUnloadFunc(self)
    end

    ---保留接口：缓存从资源包中加载的对象
    ---目前不做这部分功能
    function BundleCache:CacheObject(assetName, obj)
    end

    return BundleCache
end

function CreateLocalObjCache(cacheKey)
    ---@class LocalObjectCache : ObjectCache
    local LocalCache = CreateObjectCache(cacheKey)

    ---基类方法
    local baseCacheFuc = LocalCache.Cache
    local baseUnloadFunc = LocalCache.Unload

    function LocalCache:Cache(obj)
        assert(obj ~= nil,"Nil Argument::obj")
        assert(obj.GetType and obj:GetType():IsSubclassOf(typeof(CS.UnityEngine.Object)),"Invalid argument type,expect:UnityEngine.Object")
        baseCacheFuc(self,obj)
    end

    function LocalCache:Unload()
        baseUnloadFunc(self)
        CS.UnityEngine.Resources.UnloadUnusedAssets()
    end

    return LocalCache
end